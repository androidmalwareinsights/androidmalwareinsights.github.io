from Aion.data_generation.reconstruction.Numerical import *
from Aion.data_inference.learning.ScikitLearners import *
from Aion.utils.misc import *
from Aion.utils.graphics import *
import glob, sys

def main():
    if len(sys.argv) < 4:
        print "[*] USAGE: python experiment.py [malwaredir] [goodwaredir] [fileext]"
        return False
 
    malwaredir, goodwaredir, fileext = sys.argv[1], sys.argv[2], sys.argv[3]
    malware = glob.glob("%s/*.%s" % (malwaredir, fileext))
    goodware = glob.glob("%s/*.%s" % (goodwaredir, fileext))

    K = [10, 25, 50, 100, 250, 500]
    E = [10, 25, 50, 75, 100]
    allCs = ["KNN-%s" % x for x in K] + ["FOREST-%s" % e for e in E] + ["SVM"]
    print "[*] Loading feature vectors"
    X, y = [], []
    names = []
    for i in malware+goodware:
        v = loadNumericalFeatures(i)
        if len(v) < 1:
            print "[*] Could not retrieve numerical feaures from \"%s\"" % i
            continue
        X.append(v)
        names.append(i)
        if i in malware:
            y.append(1)
        else:
            y.append(0)

    print "[*] Retrieved %s feature vectors. Commencing learning" % len(X)
    predicted = predictKFoldEnsemble(X, y, allCs)
    print "[*] Scored metrics: %s" % str(calculateMetrics(predicted, y))

    misclassified = []
    for index in range(len(names)):
        if y[index] == 1 and predicted[index] != y[index]:
            misclassified.append(names[index])

    print "[*] %s apps were misclassified" % len(misclassified)

    encyclopedia = open("/home/aesalem/Research/Android/Datasets/Malware/encyclopedia_malicia.csv").read().split('\n')[1:-1]
    data = {}
    for e in encyclopedia:
        line = e.split(',')
        key, value = line[0], {"name": line[11], "type": line[12], "detected_by": line[7]}
        data[key.lower()] = value

    # Now find the misclassified apps
    bastardi = []
    for m in misclassified:
        h = m[m.rfind('/')+1:m.find('.')].lower()
        if h in data.keys():
            bastardi.append(data[h])

    print bastardi

    return True

if __name__ == "__main__":
    main()
