from Aion.data_generation.reconstruction.Numerical import *
from Aion.data_inference.learning.ScikitLearners import *
from Aion.utils.misc import *
from Aion.utils.graphics import *
import glob, sys

def main():
    if len(sys.argv) < 6:
        print "[*] USAGE: python experiment.py [training_malwaredir] [training_goodwaredir] [test_malwaredir] [test_goodwaredir] [fileext]"
        return False
 
    sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5]
    training_malware = glob.glob("%s/*.%s" % (sys.argv[1], sys.argv[5]))
    training_goodware = glob.glob("%s/*.%s" % (sys.argv[2], sys.argv[5]))
    test_malware = glob.glob("%s/*.%s" % (sys.argv[3], sys.argv[5]))
    test_goodware = glob.glob("%s/*.%s" % (sys.argv[4], sys.argv[5]))

    K = [10, 25, 50, 100, 250, 500]
    E = [10, 25, 50, 75, 100]
    allCs = ["KNN-%s" % x for x in K] + ["FOREST-%s" % e for e in E] + ["SVM"]

    print "[*] Loading training feature vectors"
    Xtr, Xte, ytr, yte = [], [], [], []
    for i in training_malware+training_goodware:
        v = loadNumericalFeatures(i)
        if len(v) < 1:
            print "[*] Could not retrieve numerical feaures from \"%s\"" % i
            continue
        Xtr.append(v)
        if i in training_malware:
            ytr.append(1)
        else:
            ytr.append(0)
    

    print "[*] Retrieved %s training feature vectors." % len(Xtr)
    print "[*] Loading test feature vectors"
    for i in test_malware+test_goodware:
        v = loadNumericalFeatures(i)
        if len(v) < 1:
            print "[*] Could not retrieve numerical feaures from \"%s\"" % i
            continue
        Xte.append(v)
        if i in test_malware:
            yte.append(1)
        else:
            yte.append(0)

    print "[*] Retrieved %s test feature vectors. Commencing learning" % len(Xte)

    voting, predicted, predicted_test = predictAndTestEnsemble(Xtr, ytr, Xte, yte, allCs)
    print "[*] Scored metrics training dataset: %s" % str(calculateMetrics(predicted, ytr))
    print "[*] Scored metrics test dataset: %s" % str(calculateMetrics(predicted_test, yte))

    return True

if __name__ == "__main__":
    main()
